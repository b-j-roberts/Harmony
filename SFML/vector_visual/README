***********************************************************
*
*
*  C++ 2D Vector Height Visualizer by Brandon Roberts
*  Version 1.00 Update : Realese!
*
*
***********************************************************

** Contains **
--------------
Harmony/SFML/vector_visual/2D_vector_height.h


** Ideas **
-----------
Listed as TO DO in code
Look into color things , links listed in look_into file


** Issues **
------------
Listed as TO DO in code


** Dependancies **
------------------
SFML


** Compiling **
---------------
If included in main.cpp:
  g++ -c main.cpp
  g++ main.o -o main $SFML

i.e. use SFML alias made in .bashrc


** READ **
----------

This is an SFML vector height visualizer that will, based on the shader picked, display the vector 
  heights on a window as varying colors.


** Interface **
--------------

Create Custom Shaders :

  publically inherit from Shader & create a public function with signature :
    sf::Color color(float shift) const override;
  This function should return a color based on a given shift value ranging from 0.f - 1.f

Current Shaders : 

  Basics: These are single color scale shaders
  Red_Shader - shifts from Black to Red
  Green_Shader - shifts from Black to Green
  Blue_Shader - shifts from Black to Blue
  Yellow_Shader - shifts from Black to Yellow
  Purple_Shader - shifts from Black to Purple
  Cyan_Shader - shifts from Black to Cyan
  Grayscale_Shader - shifts from Black to White

  Jet: These are based on the Matlab Jet colormap function
  Jet_BTR_Shader - Jet colormap from Blue to Red (Traditional)
  Jet_RTB_Shader - Jet colormap from Red to Blue
  Jet_BTG_Shader - Jet colormap from Blue to Green
  Jet_GTB_Shader - Jet colormap from Green to Blue
  Jet_GTR_Shader - Jet colormap from Green to Red
  Jet_RTG_Shader - Jet colormap from Red to Green
  Jet_Shader - alias for Jet_BTR_Shader

Visualization Functions :

  linear_range_shader(window, vector, shader, range_min = 0.f, range_max = 1.f) :
    - Draws vector to window with shader on range given
    ex : linear_range_shader(window, vec, Blue_Shader(), -.5, .5);

  linear_range_shader_mesh(window, vector, shader, range_min = 0.f, range_max = 1.f, mesh = 5) :
    - Same as above, but only draws point (i, j) if i % mesh == 0 || j % mesh == 0 , ie creates mesh

  linear_range_shader_dots(window, vector, shader, range_min = 0.f, range_max = 1.f, mesh = 5) :
    - Same as above, but only draws point (i, j) if i % mesh == 0 && j % mesh == 0 , ie creates dots

  make_or_break(window, vec, break_val, color) :
    - Draws vector to window with color if value is over break_val, else draws nothing
    ex : make_or_break(window, vec, .5, sf::Color::Green);

  make_or_break_range(window, vector, break_min, break_max, color) :
    -  Same as above but only drawn if value in break range
