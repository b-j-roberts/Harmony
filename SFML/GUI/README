***********************************************************
*
*
*  C++ SFML Based GUI by Brandon Roberts
*  Version 1.00 Update : Realese!
*
*
***********************************************************

** Contains **
--------------
Harmony/SFML/GUI/gui.h


** Idead **
-----------
Listed as TO DO in code
More color schemes


** Issues **
------------
Listed as TO DO in code


** Dependancies **
------------------
SFML
X11 (Xinitthreads)


** Compiling **
---------------
If included in main.cpp:
  - main.cpp must have `XInitThreads();` before initializing GUI object
  g++ -c main.cpp -std=c++1z
  g++ main.o -o main $SFML -pthread -lX11

i.e. us SFML alias made in .bashrc


** READ **
-----------

This is an SFML based gui that allows the dealing of clicks and updating button states in its own
  thread. Allows easy interface for creating a GUI & coloring it ( making it match )


** Interface **
---------------

NOTE : Must include line `XInitThreads();` in int main() before calling GUI constructor

GUI Construction :
  GUI gui_name(const sf::RenderWindow&, sf::Font=default font);

GUI Elements Creating :
  
  Background :
    Background background_name(size_x, size_y, pos_x, pos_y (from top left), sf::Color = default)

  Text Display :
    Text_Display text_display_name(size_x, size_y, pos_x, pos_y (from top left), string label,
                                   sf::Color = default background color)

  Toggle Button : ( ie a button that toggles state each time clicked )
    Toggle_Button toggle_button_name(size_x, size_y, pos_x, pos_y (from top left), sting label,
                                     sf::Color active = default, sf::Color deactive = default)

  Push Button : ( ie a button that gives true state each time clicked, only after click duration )
    Push_Button push_button_name(size_x, size_y, pos_x, pos_y (from top left), sting label,
                                 sf::Color active = default, sf::Color deactive = default)

GUI Interface :
  
  ADD elements :
    Backgrounds :    gui_name.add_background(background_name_1, background_name_2, ...);
    Text Displays :  gui_name.add_text(text_display_name_1, text_display_name_2, ...);
    Toggle Buttons : gui_name.add_toggle_button(toggle_button_name_1, toggle_button_2, ...); 
    Push Buttons :   gui_name.add_push_button(push_button_name_1, push_button_name_2);

  Coloring GUI :
    Backgrounds (including Text Display's background) :
      gui_name.set_background_color(sf::Color Background color, sf::Color Text_Display back color);
      gui_name.set_background_color(sf::Color Background color & Text_Display back color);

    Text Color : gui_name.set_text_color(sf::Color);
    
    Button Colors :
      gui_name.set_button_color(sf::Color active color, sf::Color deactive color);
      gui_name.set_button_color(std::pair<sf::Color, sf::Color> active-deactive color pair);

    All Colors in one : gui_name.set_color_scheme(const GUI_Scheme&);

  Other essentials :
  
    DRAW : gui_name.draw(sf::RenderWindow&); - draws GUI Elements to window
    STATE : gui_name.get_state(); - invalidates past maps returned from calls to this function
      - TO USE STATE MAP : gui_state_map_returned[gui_element_name()] - true/false based on state
                           gui_state_map_returned[gui_element_name.id()] - t/f based on state
